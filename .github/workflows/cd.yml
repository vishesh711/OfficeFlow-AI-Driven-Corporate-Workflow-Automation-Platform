name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  REGISTRY_PREFIX: ${{ github.repository_owner }}/officeflow

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        service:
          - workflow-engine
          - auth-service
          - identity-service
          - ai-service
          - email-service
          - document-service
          - calendar-service
          - slack-service
          - webhook-gateway
          - workflow-designer
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'workflow-designer' && 'apps' || 'services' }}/${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            GIT_COMMIT=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.REGISTRY_PREFIX }}/${{ matrix.service }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom-${{ matrix.service }}.spdx.json
        continue-on-error: true

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.spdx.json
        continue-on-error: true

  # Security scanning of built images
  security-scan-images:
    name: Security Scan Images
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        service:
          - workflow-engine
          - auth-service
          - identity-service
          - ai-service
          - email-service
          - document-service
          - calendar-service
          - slack-service
          - webhook-gateway
          - workflow-designer
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.REGISTRY_PREFIX }}/${{ matrix.service }}:latest
          format: sarif
          output: trivy-results-${{ matrix.service }}.sarif
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results-${{ matrix.service }}.sarif
        continue-on-error: true

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan-images]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config current-context

      - name: Update image tags in manifests
        run: |
          VERSION=${{ github.event.inputs.version || github.sha }}
          find k8s -name "*.yaml" -exec sed -i "s|:latest|:main-${VERSION:0:7}|g" {} \;

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          ./scripts/k8s-deploy.sh --namespace officeflow-staging --wait-timeout 600

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Run basic health checks
          curl -f https://staging-api.officeflow.com/health || exit 1
          curl -f https://staging-auth.officeflow.com/health || exit 1
          curl -f https://staging.officeflow.com/health || exit 1

      - name: Run integration tests against staging
        run: |
          if [ -f "tests/integration/staging.test.js" ]; then
            npm test -- tests/integration/staging.test.js
          fi
        env:
          TEST_BASE_URL: https://staging-api.officeflow.com
          TEST_AUTH_URL: https://staging-auth.officeflow.com

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan-images, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config current-context

      - name: Create backup
        run: |
          export KUBECONFIG=kubeconfig
          
          # Backup database
          kubectl exec -n officeflow deployment/postgres -- pg_dump -U officeflow officeflow > backup-$(date +%Y%m%d-%H%M%S).sql
          
          # Store backup in cloud storage
          # aws s3 cp backup-*.sql s3://officeflow-backups/

      - name: Blue-Green Deployment
        run: |
          export KUBECONFIG=kubeconfig
          VERSION=${{ github.event.inputs.version || github.sha }}
          
          # Update image tags
          find k8s -name "*.yaml" -exec sed -i "s|:latest|:${VERSION}|g" {} \;
          
          # Deploy to green environment
          ./scripts/k8s-deploy.sh --namespace officeflow-green --wait-timeout 600
          
          # Run health checks on green environment
          sleep 120
          
          # Switch traffic to green (update ingress)
          kubectl patch ingress officeflow-ingress -n officeflow \
            --type='json' \
            -p='[{"op": "replace", "path": "/spec/rules/0/http/paths/0/backend/service/name", "value": "workflow-engine-green"}]'
          
          # Wait and verify
          sleep 60
          curl -f https://api.officeflow.com/health || exit 1
          
          # Clean up blue environment
          kubectl delete namespace officeflow-blue --ignore-not-found=true
          kubectl create namespace officeflow-blue
          
          # Rename current to blue for next deployment
          kubectl get all -n officeflow -o yaml | sed 's/namespace: officeflow/namespace: officeflow-blue/' | kubectl apply -f -

      - name: Run production smoke tests
        run: |
          # Basic health checks
          curl -f https://api.officeflow.com/health || exit 1
          curl -f https://auth.officeflow.com/health || exit 1
          curl -f https://app.officeflow.com/health || exit 1
          
          # Test critical workflows
          if [ -f "tests/production/smoke.test.js" ]; then
            npm test -- tests/production/smoke.test.js
          fi
        env:
          TEST_BASE_URL: https://api.officeflow.com
          TEST_AUTH_URL: https://auth.officeflow.com

  # Rollback capability
  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          else
            echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          fi
          export KUBECONFIG=kubeconfig

      - name: Rollback deployment
        run: |
          export KUBECONFIG=kubeconfig
          NAMESPACE=${{ github.event.inputs.environment == 'staging' && 'officeflow-staging' || 'officeflow' }}
          
          # Rollback all deployments
          kubectl rollout undo deployment --all -n ${NAMESPACE}
          
          # Wait for rollback to complete
          kubectl rollout status deployment --all -n ${NAMESPACE} --timeout=600s

      - name: Verify rollback
        run: |
          sleep 60
          BASE_URL=${{ github.event.inputs.environment == 'staging' && 'https://staging-api.officeflow.com' || 'https://api.officeflow.com' }}
          curl -f ${BASE_URL}/health || exit 1

  # Notify deployment status
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack on successful deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            🚀 Deployment successful!
            Version: ${{ github.sha }}
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ❌ Deployment failed!
            Version: ${{ github.sha }}
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub release
        if: success() && startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes
            
            See [CHANGELOG.md](CHANGELOG.md) for details.
            
            ## Docker Images
            
            All images are available at `ghcr.io/${{ github.repository_owner }}/officeflow/*:latest`
            
            ## Deployment
            
            This release has been automatically deployed to production.
          draft: false
          prerelease: false