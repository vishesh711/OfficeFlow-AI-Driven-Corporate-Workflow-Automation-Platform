name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json
          json: true
        continue-on-error: true

      - name: Upload Snyk results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  # SAST (Static Application Security Testing)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nodejs
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Container image scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service:
          - workflow-engine
          - auth-service
          - identity-service
          - ai-service
          - email-service
          - document-service
          - calendar-service
          - slack-service
          - webhook-gateway
          - workflow-designer
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service == 'workflow-designer' && 'apps/workflow-designer/Dockerfile' || format('services/{0}/Dockerfile', matrix.service) }}
          push: false
          tags: officeflow/${{ matrix.service }}:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: officeflow/${{ matrix.service }}:security-scan
          format: sarif
          output: trivy-results-${{ matrix.service }}.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results-${{ matrix.service }}.sarif

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: officeflow/${{ matrix.service }}:security-scan
          fail-build: false
          severity-cutoff: high

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: officeflow/${{ matrix.service }}:security-scan
          sarif-file: scout-results-${{ matrix.service }}.sarif

      - name: Upload Docker Scout results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: scout-results-${{ matrix.service }}.sarif

  # Infrastructure as Code scanning
  iac-scan:
    name: Infrastructure as Code Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: kubernetes,dockerfile
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif

      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'k8s'
          iac_dir: 'k8s'
          policy_type: 'k8s'
          only_warn: true
          sarif_upload: true

      - name: Run kube-score
        run: |
          wget https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64.tar.gz
          tar xzf kube-score_linux_amd64.tar.gz
          sudo mv kube-score /usr/local/bin/
          
          find k8s -name "*.yaml" -exec kube-score score {} \; || true

  # License compliance scanning
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run license checker
        run: |
          npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' || true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Security policy compliance
  compliance-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy files
        run: |
          # Check for required security files
          files=(
            "SECURITY.md"
            ".github/SECURITY.md"
            "docs/SECURITY.md"
          )
          
          found=false
          for file in "${files[@]}"; do
            if [[ -f "$file" ]]; then
              echo "✅ Found security policy: $file"
              found=true
              break
            fi
          done
          
          if [[ "$found" == false ]]; then
            echo "❌ No security policy found. Please create SECURITY.md"
            exit 1
          fi

      - name: Check for vulnerability disclosure
        run: |
          if [[ -f "SECURITY.md" ]] || [[ -f ".github/SECURITY.md" ]] || [[ -f "docs/SECURITY.md" ]]; then
            echo "✅ Vulnerability disclosure policy found"
          else
            echo "❌ No vulnerability disclosure policy found"
            exit 1
          fi

      - name: Validate Docker security practices
        run: |
          # Check Dockerfiles for security best practices
          find . -name "Dockerfile*" -exec echo "Checking {}" \; -exec docker run --rm -i hadolint/hadolint < {} \; || true

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, container-scan, iac-scan, license-scan, compliance-check]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate security summary
        run: |
          cat > security-report.md << EOF
          # Security Scan Report
          
          **Date:** $(date)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref }}
          
          ## Scan Results
          
          | Scan Type | Status |
          |-----------|--------|
          | Dependency Scan | ${{ needs.dependency-scan.result }} |
          | SAST Scan | ${{ needs.sast-scan.result }} |
          | Secret Scan | ${{ needs.secret-scan.result }} |
          | Container Scan | ${{ needs.container-scan.result }} |
          | IaC Scan | ${{ needs.iac-scan.result }} |
          | License Scan | ${{ needs.license-scan.result }} |
          | Compliance Check | ${{ needs.compliance-check.result }} |
          
          ## Next Steps
          
          - Review any failed scans in the GitHub Security tab
          - Address high and critical vulnerabilities
          - Update dependencies with known vulnerabilities
          - Review and approve any new licenses
          
          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Notify security team
  notify-security:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, container-scan, iac-scan, license-scan, compliance-check]
    if: failure() && github.event_name == 'schedule'
    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security'
          text: |
            🚨 Security scan failures detected!
            
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            
            Please review the security scan results and take appropriate action.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}